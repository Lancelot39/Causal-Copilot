{
  "PC": {
    "alpha": {
      "meaning": "Desired significance level in (0, 1)",
      "suggested_values": {
        "default": 0.05,
        "small_sample": 0.1,
        "large_sample": 0.01
      },
      "reasoning": "Adjust based on sample size, more conservative (lower) values for larger samples. If < 500, use 0.1; Else if 500-10000 (<10000 but >500), use 0.05; Else if > 10000, using 0.01."
    },
    "indep_test": {
      "meaning": "Independence test method",
      "suggested_values": {
        "default": "fisherz",
        "continuous": "fisherz",
        "discrete": "chisq",
        "mixed": "gsq"
      },
      "reasoning": "Choose based on data type: 'fisherz' for continuous, 'chisq' for discrete, 'gsq' for mixed data types.",
      "context_file": "algorithm/context/independence_test.txt"
    },
    "depth": {
      "meaning": "Maximum depth for fast adjacency search",
      "suggested_values": {
        "default": -1,
        "small_graph": 6,
        "medium_graph": 4,
        "large_graph": 2,
        "extra_large_graph": 1
      },
      "reasoning": "Use -1 for unlimited depth. For large graphs, limiting depth (e.g., 1-3) can significantly speed up the algorithm at the cost of some accuracy. A graph with node number < 10, use depth 6; A graph with node number 10 - 25, use depth 4; A graph with node number 25-50, use depth 2; A graph with node number > 50, use depth 1."
    },
    "uc_rule": {
      "meaning": "How unshielded colliders are oriented",
      "suggested_values": {
        "default": 0,
        "uc_sepset": 0,
        "maxP": 1,
        "definiteMaxP": 2
      },
      "reasoning": "Use 0 for standard PC, 1 or 2 for more conservative collider orientations in the presence of faithfulness violations."
    },
    "uc_priority": {
      "meaning": "Rule for resolving conflicts between unshielded colliders",
      "suggested_values": {
        "default": 2,
        "overwrite": 0,
        "orient_bidirected": 1,
        "prioritize_existing": 2,
        "prioritize_stronger": 3,
        "prioritize_stronger_star": 4
      },
      "reasoning": "Higher values (2-4) are more conservative. Use 3 or 4 when you want to prioritize stronger colliders in case of conflicts."
    }
  },
  "FCI": {
    "alpha": {
      "meaning": "Significance level in (0, 1)",
      "suggested_values": {
        "default": 0.05,
        "small_sample": 0.1,
        "large_sample": 0.01
      },
      "reasoning": "Adjust based on sample size, more conservative (lower) values for larger samples. If < 500, use 0.1; Else if 500-10000 (<10000 but >500), use 0.05; Else if > 10000, using 0.01."
    },
    "independence_test_method": {
      "meaning": "Independence test method",
      "suggested_values": {
        "default": "fisherz",
        "continuous": "fisherz",
        "discrete": "chisq",
        "mixed": "gsq"
      },
      "reasoning": "Choose based on data type: 'fisherz' for continuous, 'chisq' for discrete, 'gsq' for mixed data types.",
      "context_file": "algorithm/context/independence_test.txt"
    },
    "depth": {
      "meaning": "Maximum depth for fast adjacency search",
      "suggested_values": {
        "default": -1,
        "small_graph": 6,
        "medium_graph": 4,
        "large_graph": 2,
        "extra_large_graph": 1
      },
      "reasoning": "Use -1 for unlimited depth. For large graphs, limiting depth (e.g., 1-3) can significantly speed up the algorithm at the cost of some accuracy. A graph with node number < 10, use depth 6; A graph with node number 10 - 25, use depth 4; A graph with node number 25-50, use depth 2; A graph with node number > 50, use depth 1."
    },
    "max_path_length": {
      "meaning": "Maximum length of any discriminating path",
      "suggested_values": {
        "default": -1,
        "small_graph": 3,
        "medium_graph": 5,
        "large_graph": 7
      },
      "reasoning": "Limit for large graphs to improve speed. -1 for no limit, but can be computationally expensive for large graphs."
    }
  },
  "GES": {
    "score_func": {
      "meaning": "Score function to be used",
      "suggested_values": {
        "default": "local_score_BIC",
        "BIC": "local_score_BIC",
        "BDeu": "local_score_BDeu",
        "marginal_general": "local_score_marginal_general",
        "marginal_multi": "local_score_marginal_multi"
      },
      "reasoning": "Use 'local_score_BIC' for a good balance of fit and complexity. 'BDeu' for discrete data. CV and marginal scores for more robust model selection, especially with limited data.",
      "context_file": "algorithm/context/score_function.txt"
    },
    "maxP": {
      "meaning": "Allowed maximum number of parents when searching the graph",
      "suggested_values": {
        "default": null,
        "small_graph": 3,
        "medium_graph": 5,
        "large_graph": 7
      },
      "reasoning": "Limit maxP for large graphs to reduce computational complexity. No limit (null) for small graphs to explore all possibilities."
    }
  },
  "NOTEARS": {
    "max_iter": {
      "meaning": "Maximum number of dual ascent steps during optimization",
      "suggested_values": {
        "default": 100,
        "complex": 250
      },
      "reasoning": "Increase for more complex graphs (with many variables)."
    },
    "h_tol": {
      "meaning": "Exit tolerance for h(W) during optimization",
      "suggested_values": {
        "default": 1e-8,
        "strict": 1e-10,
        "relaxed": 1e-6
      },
      "reasoning": "Lower values enforce stricter acyclicity. Use lower values for more accurate results, higher values for faster convergence."
    },
    "w_threshold": {
      "meaning": "Threshold for absolute edge weights",
      "suggested_values": {
        "default": 0.0,
        "sparse": 0.3,
        "dense": 0.1
      },
      "reasoning": "Higher values lead to sparser graphs. Adjust based on expected graph density and to filter out weak connections."
    },
    "sparse": {
      "meaning": "Whether to use sparse optimization",
      "suggested_values": {
        "default": true,
        "sparse": true,
        "dense": false
      },
      "reasoning": "Use true for sparse optimization, which has better identifiability of the true graph."
    },
    "beta": {
      "meaning": "L1 regularization coefficient for edge weights",
      "suggested_values": {
        "default": 0.01,
        "very_sparse": 0.1,
        "moderately_sparse": 0.02,
        "dense": 0.001
      },
      "reasoning": "Higher values lead to sparser graphs. Adjust based on expected graph density and to filter out weak connections."
    }
  },
  "CDNOD": {
    "alpha": {
      "meaning": "Significance level in (0, 1)",
      "suggested_values": {
        "default": 0.05,
        "small_sample": 0.1,
        "large_sample": 0.01
      },
      "reasoning": "Adjust based on sample size, more conservative (lower) values for larger samples. If < 500, use 0.1; Else if 500-10000 (<10000 but >500), use 0.05; Else if > 10000, using 0.01."
    },
    "indep_test": {
      "meaning": "Independence test method",
      "suggested_values": {
        "default": "fisherz",
        "continuous": "fisherz",
        "discrete": "chisq",
        "mixed": "gsq",
        "nonlinear": "kci"
      },
      "reasoning": "Choose based on data type: 'fisherz' for continuous, it is fast and general; 'kci' is suitable for nonlinear data but slow (need consider time cost); 'chisq' for discrete, 'gsq' for mixed data types.",
      "context_file": "algorithm/context/independence_test.txt"
    },
    "depth": {
      "meaning": "Maximum depth for fast adjacency search",
      "suggested_values": {
        "default": -1,
        "small_graph": 6,
        "medium_graph": 4,
        "large_graph": 2,
        "extra_large_graph": 1
      },
      "reasoning": "Use -1 for unlimited depth. For large graphs, limiting depth (e.g., 1-3) can significantly speed up the algorithm at the cost of some accuracy. A graph with node number < 10, use depth 6; A graph with node number 10 - 25, use depth 4; A graph with node number 25-50, use depth 2; A graph with node number > 50, use depth 1."
    },
    "stable": {
      "meaning": "Whether to use the stable version of the algorithm",
      "suggested_values": {
        "default": true,
        "unstable": false
      },
      "reasoning": "Use true for more stable results, false for potentially faster but less stable results."
    },
    "uc_rule": {
      "meaning": "How unshielded colliders are oriented",
      "suggested_values": {
        "default": 0,
        "uc_sepset": 0,
        "maxP": 1,
        "definiteMaxP": 2
      },
      "reasoning": "Use 0 for standard PC, 1 or 2 for more conservative collider orientations in the presence of faithfulness violations."
    },
    "uc_priority": {
      "meaning": "Rule for resolving conflicts between unshielded colliders",
      "suggested_values": {
        "default": 2,
        "overwrite": 0,
        "orient_bidirected": 1,
        "prioritize_existing": 2,
        "prioritize_stronger": 3,
        "prioritize_stronger_star": 4
      },
      "reasoning": "Higher values (2-4) are more conservative. Use 3 or 4 when you want to prioritize stronger colliders in case of conflicts."
    },
    "mvcdnod": {
      "meaning": "Whether to use the MVCDNOD algorithm",
      "suggested_values": {
        "default": false,
        "use_mvcdnod": true
      },
      "reasoning": "Set to true to use the MVCDNOD algorithm, which can handle missing values."
    },
    "correction_name": {
      "meaning": "Name of the correction method for the independence test",
      "suggested_values": {
        "default": "MV_Crtn_Fisher_Z"
      },
      "reasoning": "Use 'MV_Crtn_Fisher_Z' for Fisher's Z test with missing value correction."
    }
  },
  "DirectLiNGAM": {
    "measure": {
      "meaning": "Measure to evaluate independence",
      "suggested_values": {
        "default": "pwling",
        "kernel": "kernel"
      },
      "reasoning": "Use 'pwling' for pairwise likelihood-based measure, or 'kernel' for kernel-based measure."
    },
    "random_state": {
      "meaning": "Seed used by the random number generator",
      "suggested_values": {
        "default": null,
        "fixed_seed": 42
      },
      "reasoning": "Set to null for random behavior, or a fixed integer for reproducible results."
    },
    "prior_knowledge": {
      "meaning": "Prior knowledge used for causal discovery",
      "suggested_values": {
        "default": null
      },
      "reasoning": "Can be set to a matrix where 0 means no path, 1 means a directed path, and -1 means no prior knowledge."
    },
    "apply_prior_knowledge_softly": {
      "meaning": "Whether to apply prior knowledge softly",
      "suggested_values": {
        "default": false,
        "soft_application": true
      },
      "reasoning": "Set to true to apply prior knowledge in a soft manner, false for strict application."
    }
  },
  "ICALiNGAM": {
    "random_state": {
      "meaning": "Seed used by the random number generator",
      "suggested_values": {
        "default": null,
        "fixed_seed": 42
      },
      "reasoning": "Set to null for random behavior, or a fixed integer for reproducible results."
    },
    "max_iter": {
      "meaning": "Maximum number of iterations for FastICA",
      "suggested_values": {
        "default": 1000,
        "low_iterations": 500,
        "high_iterations": 2000
      },
      "reasoning": "Increase for potentially better results at the cost of longer computation time."
    }
  }
}
